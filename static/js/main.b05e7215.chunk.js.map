{"version":3,"sources":["components/Head/index.jsx","components/List/index.jsx","components/Editor/index.jsx","components/Body/index.jsx","components/Memo/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Head","onMemoAdd","onMemoDelete","className","Button","variant","color","startIcon","onClick","List","useContext","Memos","memos","CurrentMemo","currentMemo","setCurrentMemo","useState","searchMemoResults","setSearchMemoResults","isSearch","setIsSearch","handleMemoClick","id","clickedMemo","find","memo","showMemoList","map","content","showSearchResults","action","type","placeholder","onChange","e","searchResults","filter","toLowerCase","search","target","value","IconButton","aria-label","style","padding","Editor","editMemoContent","setEditMemoContent","useEffect","Body","initialState","React","createContext","Memo","JSON","parse","localStorage","getItem","setMemos","Mode","darkMode","setItem","stringify","newMemos","Provider","newMemo","Math","random","toString","substring","App","setDarkMode","theme","createMuiTheme","palette","primary","main","colors","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b05e7215.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport \"./index.css\";\n\nconst Head = ({ onMemoAdd, onMemoDelete }) => {\n  // ADD\n  const handleMemoAdd = () => {\n    onMemoAdd();\n  };\n\n  // DELETE\n  const handleMemoDelete = () => {\n    onMemoDelete();\n  };\n\n  return (\n    <div className=\"memo-head\">\n      <div className=\"header\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<AddCircleIcon />}\n          onClick={handleMemoAdd}\n        >\n          Add\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<DeleteIcon />}\n          onClick={handleMemoDelete}\n        >\n          Delete\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Head;\n","import React, { useContext, useState } from \"react\";\nimport { Memos, CurrentMemo } from \"../Memo\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst List = () => {\n  const [memos, setMemos] = useContext(Memos); // eslint-disable-line\n  const [currentMemo, setCurrentMemo] = useContext(CurrentMemo);\n  const [searchMemoResults, setSearchMemoResults] = useState([]);\n  const [isSearch, setIsSearch] = useState(false);\n\n  // memo 選択\n  const handleMemoClick = (id) => {\n    const clickedMemo = memos.find((memo) => memo.id === id);\n    setCurrentMemo(clickedMemo);\n  };\n\n  // memo 検索\n  const handleMemoSearch = (e) => {\n    const searchResults = memos.filter((memo) => {\n      return (\n        memo.content.toLowerCase().search(e.target.value.toLowerCase()) !== -1\n      );\n    });\n    setSearchMemoResults(searchResults);\n    setIsSearch(true);\n  };\n\n  // memo 一覧表示\n  const showMemoList = memos.map((memo) => {\n    return (\n      <li\n        key={memo.id}\n        className={currentMemo.id === memo.id ? \"is-current\" : \"\"}\n        onClick={() => handleMemoClick(memo.id)}\n      >\n        <p>{memo.content}</p>\n      </li>\n    );\n  });\n\n  // memo 検索結果一覧表示\n  const showSearchResults = searchMemoResults.map((memo) => {\n    return (\n      <li\n        key={memo.id}\n        className={currentMemo.id === memo.id ? \"is-current\" : \"\"}\n        onClick={() => handleMemoClick(memo.id)}\n      >\n        <p>{memo.content}</p>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      <div>\n        <div className=\"memo-body_search\">\n          <form action=\"\">\n            <input\n              type=\"text\"\n              placeholder=\"search\"\n              onChange={handleMemoSearch}\n            />\n            <IconButton aria-label=\"search memo\" style={{ padding: 0 }}>\n              <SearchIcon />\n            </IconButton>\n          </form>\n        </div>\n      </div>\n      {(() => {\n        if (!isSearch) {\n          return <ul>{showMemoList}</ul>;\n        } else {\n          if (searchMemoResults) {\n            return <ul>{showSearchResults}</ul>;\n          }\n        }\n      })()}\n    </>\n  );\n};\n\nexport default List;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { CurrentMemo } from \"../Memo\";\n\nconst Editor = () => {\n  const [currentMemo, setCurrentMemo] = useContext(CurrentMemo);\n  const [editMemoContent, setEditMemoContent] = useState(\"\");\n\n  // memo の編集\n  const handleMemoChange = (e) => {\n    setEditMemoContent(e.target.value);\n    setCurrentMemo({\n      ...currentMemo,\n      content: e.target.value,\n    });\n  };\n\n  // 選択した memo の内容を Editor に反映させる\n  useEffect(() => {\n    setEditMemoContent(currentMemo.content);\n  }, [currentMemo]);\n\n  return (\n    <textarea value={editMemoContent} onChange={handleMemoChange}></textarea>\n  );\n};\n\nexport default Editor;\n","import React from \"react\";\nimport List from \"../List\";\nimport Editor from \"../Editor\";\nimport \"./index.css\";\n\nconst Body = () => {\n  return (\n    <div className=\"memo-body\">\n      <div className=\"memo-body_list\">\n        <List />\n      </div>\n      <div className=\"memo-body_content\">\n        <Editor />\n      </div>\n    </div>\n  );\n};\n\nexport default Body;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport Head from \"../Head\";\nimport Body from \"../Body\";\nimport { Mode } from \"../../App\";\nimport \"./index.css\";\n\nconst initialState = {\n  useMemo: {\n    id: \"\",\n    content: \"\",\n  },\n};\n\nexport const Memos = React.createContext();\nexport const CurrentMemo = React.createContext();\n\nconst Memo = () => {\n  // localStrage から memo を取得\n  const [memos, setMemos] = useState(\n    JSON.parse(localStorage.getItem(\"react-memo\")) || []\n  );\n  const [currentMemo, setCurrentMemo] = useState(initialState.useMemo);\n  const [darkMode, setDarkMode] = useContext(Mode);\n\n  // ADD\n  const handleMemoAdd = () => {\n    const newMemo = {\n      id: Math.random().toString(32).substring(2),\n      content: \"\",\n    };\n    const newMemos = [...memos, newMemo];\n    setMemos(newMemos);\n    setCurrentMemo(newMemo);\n  };\n\n  // DELETE\n  const handleMemoDelete = () => {\n    const newMemos = memos.filter((memo) => memo.id !== currentMemo.id);\n    const newMemo = {\n      id: \"\",\n      content: \"\",\n    };\n    setMemos(newMemos);\n    setCurrentMemo(newMemo);\n  };\n\n  // memos 一覧に変更があるたびに localStrage に保存\n  useEffect(() => {\n    localStorage.setItem(\"react-memo\", JSON.stringify(memos));\n  }, [memos]);\n\n  // 編集（選択）中の memo の内容を memos 一覧の該当部分に反映\n  useEffect(() => {\n    const newMemos = memos.map((memo) =>\n      memo.id === currentMemo.id ? currentMemo : memo\n    );\n    setMemos(newMemos);\n\n    // Warning 回避\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentMemo]);\n\n  return (\n    <div className={darkMode ? \"memo is-dark\" : \"memo\"}>\n      <Memos.Provider value={[memos, setMemos]}>\n        <CurrentMemo.Provider value={[currentMemo, setCurrentMemo]}>\n          <Head onMemoAdd={handleMemoAdd} onMemoDelete={handleMemoDelete} />\n          <Body />\n        </CurrentMemo.Provider>\n      </Memos.Provider>\n    </div>\n  );\n};\n\nexport default Memo;\n","import React, { useState } from \"react\";\nimport Memo from \"./components/Memo\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport \"./App.css\";\n\nexport const Mode = React.createContext();\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(\n    localStorage.getItem(\"darkMode\") === \"on\" ? true : false\n  );\n\n  // DarkMode ON\n  const handleDarkModeOn = () => {\n    localStorage.setItem(\"darkMode\", \"on\");\n    setDarkMode(true);\n  };\n\n  // DarkMode OFF\n  const handleDarkModeOff = () => {\n    localStorage.setItem(\"darkMode\", \"off\");\n    setDarkMode(false);\n  };\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: colors.blue[800],\n      },\n      type: darkMode ? \"dark\" : \"light\",\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <div className=\"mode\">\n          {darkMode ? (\n            <IconButton color=\"inherit\" onClick={handleDarkModeOff}>\n              <Brightness7Icon />\n            </IconButton>\n          ) : (\n            <IconButton color=\"inherit\" onClick={handleDarkModeOn}>\n              <Brightness4Icon />\n            </IconButton>\n          )}\n        </div>\n        <Mode.Provider value={[darkMode, setDarkMode]}>\n          <Memo />\n        </Mode.Provider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}